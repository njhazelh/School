#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 29 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 67 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 37
#"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 -1 1 #"\0"
0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
23 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
42 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
44 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
19 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
          0 1276 0 17 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 23 29 1 #"\n"
0 0 17 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 23 29 1 #"\n"
0 0 25 3 7 #"#reader"
0 0 23 3 1 #"("
0 0 14 3 3 #"lib"
0 0 23 3 1 #" "
0 0 19 3 36 #"\"htdp-intermediate-lambda-reader.ss\""
0 0 23 3 1 #" "
0 0 19 3 6 #"\"lang\""
0 0 23 3 3 #")(("
0 0 14 3 7 #"modname"
0 0 23 3 1 #" "
0 0 14 3 7 #"10-22_1"
0 0 23 3 3 #") ("
0 0 14 3 19 #"read-case-sensitive"
0 0 23 3 1 #" "
0 0 21 3 2 #"#t"
0 0 23 3 3 #") ("
0 0 14 3 10 #"teachpacks"
0 0 23 3 6 #" ()) ("
0 0 14 3 13 #"htdp-settings"
0 0 23 3 3 #" #("
0 0 21 3 2 #"#t"
0 0 23 3 1 #" "
0 0 14 3 11 #"constructor"
0 0 23 3 1 #" "
0 0 14 3 17 #"repeating-decimal"
0 0 23 3 1 #" "
0 0 21 3 2 #"#f"
0 0 23 3 1 #" "
0 0 21 3 2 #"#t"
0 0 23 3 1 #" "
0 0 14 3 4 #"none"
0 0 23 3 1 #" "
0 0 21 3 2 #"#f"
0 0 23 3 6 #" ())))"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 14 #"Nicholas Jones"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 10 #"Class work"
0 0 17 29 1 #"\n"
0 0 17 3 15 #"Oct. 22nd, 2012"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 1 #"#"
0 0 17 3 1 #"|"
0 0 17 29 1 #"\n"
0 0 17 3 29 #"Quick list of Loop functions:"
0 0 17 29 1 #"\n"
0 0 17 3 23 #"-- (foldr op base list)"
0 0 17 29 1 #"\n"
0 0 17 3 23 #"-- (foldl op base list)"
0 0 17 29 1 #"\n"
0 0 17 3 16 #"-- (map op list)"
0 0 17 29 1 #"\n"
0 0 17 3 20 #"-- (ormap test list)"
0 0 17 29 1 #"\n"
0 0 17 3 21 #"-- (andmap test list)"
0 0 17 29 1 #"\n"
0 0 17 3 21 #"-- (filter test list)"
0 0 17 29 1 #"\n"
0 0 17 3 34 #"-- (build-list max-index index-op)"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"require"
0 0 23 3 1 #" "
0 0 14 3 11 #"2htdp/image"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 37 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 23 29 1 #"\n"
0 0 17 3 37 #";;;;;;;;;;;;;;;; FOLDR ;;;;;;;;;;;;;;"
0 0 23 29 1 #"\n"
0 0 17 3 37 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 6 #"fold-r"
0 0 23 3 1 #" "
0 0 14 3 2 #"op"
0 0 23 3 1 #" "
0 0 14 3 4 #"base"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 2 #") "
0 0 14 3 4 #"base"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 2 #"op"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 6 #"fold-r"
0 0 23 3 1 #" "
0 0 14 3 2 #"op"
0 0 23 3 1 #" "
0 0 14 3 4 #"base"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 6 #")))]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 3 #"sum"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 6 #"fold-r"
0 0 23 3 1 #" "
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 21 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 4 #"prod"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 6 #"fold-r"
0 0 23 3 1 #" "
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 21 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 37 #";; (foldr f base (list x1 ... xn)) = "
0 0 23 29 1 #"\n"
0 0 17 3 36 #";; (f x1 (f x2 (f ... (f xn base))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 42 #";;;;;;;;;;;;; Foldr Contract ;;;;;;;;;;;;;"
0 0 23 29 1 #"\n"
0 0 17 3 42 #";; foldr : [? ? -> ?] ? [Listof ?] -> ? =>"
0 0 23 29 1 #"\n"
0 0 17 3 42 #";; foldr : [? ? -> ?] Y [Listof X] -> ? =>"
0 0 23 29 1 #"\n"
0 0 17 3 42 #";; foldr : [X Y -> ?] Y [Listof X] -> ? =>"
0 0 23 29 1 #"\n"
0 0 17 3 39 #";; foldr : [X Y -> Y] Y [Listof X] -> Y"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 5 #"foldr"
0 0 23 3 1 #" "
0 0 14 3 2 #"op"
0 0 23 3 1 #" "
0 0 14 3 4 #"base"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 2 #") "
0 0 14 3 4 #"base"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 2 #"op"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                     ("
0 0 14 3 5 #"foldr"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 6 #")))]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 3 #";; "
0 12           4 17 944
(
 #"(#(struct:overlay #(struct:translate 30 30 #(struct:translate 20 20 "
 #"#(struct:ellipse 40 40 0 255 \"yellow\"))) #(struct:translate 0 0 #("
 #"struct:overlay #(struct:translate 20 20 #(struct:translate 30 30 #(s"
 #"truct:ellipse 60 60 0 255 \"blue\"))) #(struct:translate 0 0 #(struc"
 #"t:overlay #(struct:translate 10 10 #(struct:translate 40 40 #(struct"
 #":ellipse 80 80 0 255 \"red\"))) #(struct:translate 0 0 #(struct:crop"
 #" (#(struct:point 0 0) #(struct:point 100 0) #(struct:point 100 100) "
 #"#(struct:point 0 100)) #(struct:translate 0 0 #(struct:overlay #(str"
 #"uct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:"
 #"point 0 0) #(struct:point 100 0) #(struct:point 100 100) #(struct:po"
 #"int 0 100)) outline #(struct:pen \"black\" 2 solid round round)))) #"
 #"(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(str"
 #"uct:point 0 0) #(struct:point 100 0) #(struct:point 100 100) #(struc"
 #"t:point 0 100)) 255 \"white\")))))))))))) #(struct:bb 100 100 100) #"
 #"f)"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 5 #"foldr"
0 0 23 3 1 #" "
0 0 14 3 7 #"overlay"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"       ("
0 0 14 3 11 #"empty-scene"
0 0 23 3 1 #" "
0 0 21 3 3 #"100"
0 0 23 3 1 #" "
0 0 21 3 3 #"100"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"       ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 23 3 1 #" "
0 0 21 3 2 #"20"
0 0 23 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 3 1 #" "
0 0 19 3 8 #"\"yellow\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 6 #"circle"
0 0 23 3 1 #" "
0 0 21 3 2 #"30"
0 0 23 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"blue\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 6 #"circle"
0 0 23 3 1 #" "
0 0 21 3 2 #"40"
0 0 23 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 14 3 6 #"fold-r"
0 0 23 3 1 #" "
0 0 14 3 13 #"string-append"
0 0 23 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"John\""
0 0 23 3 1 #" "
0 0 19 3 6 #"\"Paul\""
0 0 23 3 1 #" "
0 0 19 3 8 #"\"George\""
0 0 23 3 1 #" "
0 0 19 3 7 #"\"Ringo\""
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"John\""
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 13 #"string-append"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"Paul\""
0 0 23 29 1 #"\n"
0 0 23 3 34 #"                                 ("
0 0 14 3 13 #"string-append"
0 0 23 3 1 #" "
0 0 19 3 8 #"\"George\""
0 0 23 29 1 #"\n"
0 0 23 3 49 #"                                                ("
0 0 14 3 13 #"string-append"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"Ringo\""
0 0 23 29 1 #"\n"
0 0 23 3 63
#"                                                               "
0 0 19 3 2 #"\"\""
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 37 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 23 29 1 #"\n"
0 0 17 3 37 #";;;;;;;;;;;;;;;; FOLDL ;;;;;;;;;;;;;;"
0 0 23 29 1 #"\n"
0 0 17 3 37 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 38 #";; (foldl f base (list x1 x2 .. xn)) ="
0 0 23 29 1 #"\n"
0 0 17 3 29 #";; (f xn (f ... (f x1 base)))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 3 #";; "
0 12           4 17 944
(
 #"(#(struct:overlay #(struct:translate 30 30 #(struct:translate 20 20 "
 #"#(struct:ellipse 40 40 0 255 \"red\"))) #(struct:translate 0 0 #(str"
 #"uct:overlay #(struct:translate 20 20 #(struct:translate 30 30 #(stru"
 #"ct:ellipse 60 60 0 255 \"blue\"))) #(struct:translate 0 0 #(struct:o"
 #"verlay #(struct:translate 10 10 #(struct:translate 40 40 #(struct:el"
 #"lipse 80 80 0 255 \"yellow\"))) #(struct:translate 0 0 #(struct:crop"
 #" (#(struct:point 0 0) #(struct:point 100 0) #(struct:point 100 100) "
 #"#(struct:point 0 100)) #(struct:translate 0 0 #(struct:overlay #(str"
 #"uct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:"
 #"point 0 0) #(struct:point 100 0) #(struct:point 100 100) #(struct:po"
 #"int 0 100)) outline #(struct:pen \"black\" 2 solid round round)))) #"
 #"(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(str"
 #"uct:point 0 0) #(struct:point 100 0) #(struct:point 100 100) #(struc"
 #"t:point 0 100)) 255 \"white\")))))))))))) #(struct:bb 100 100 100) #"
 #"f)"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 5 #"foldl"
0 0 23 3 1 #" "
0 0 14 3 7 #"overlay"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"       ("
0 0 14 3 11 #"empty-scene"
0 0 23 3 1 #" "
0 0 21 3 3 #"100"
0 0 23 3 1 #" "
0 0 21 3 3 #"100"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"       ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 23 3 1 #" "
0 0 21 3 2 #"40"
0 0 23 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 3 1 #" "
0 0 19 3 8 #"\"yellow\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 6 #"circle"
0 0 23 3 1 #" "
0 0 21 3 2 #"30"
0 0 23 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"blue\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 6 #"circle"
0 0 23 3 1 #" "
0 0 21 3 2 #"20"
0 0 23 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 67
#";; If operation of foldl or foldr is commutative then foldr = foldl"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 37 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 23 29 1 #"\n"
0 0 17 3 37 #";;;;;;; Application in Snake ;;;;;;;;"
0 0 23 29 1 #"\n"
0 0 17 3 37 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 32 #";; seg+img : Posn Image -> Image"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 7 #"seg+img"
0 0 23 3 1 #" "
0 0 14 3 4 #"posn"
0 0 23 3 1 #" "
0 0 14 3 3 #"img"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 11 #"place-image"
0 0 23 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 23 3 1 #" "
0 0 21 3 1 #"5"
0 0 23 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 6 #"posn-x"
0 0 23 3 1 #" "
0 0 14 3 4 #"posn"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 6 #"posn-y"
0 0 23 3 1 #" "
0 0 14 3 4 #"posn"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"               "
0 0 14 3 3 #"img"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 42 #";; segs+img : [Listof Posn] Image -> Image"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 8 #"segs+img"
0 0 23 3 1 #" "
0 0 14 3 4 #"segs"
0 0 23 3 1 #" "
0 0 14 3 3 #"img"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 5 #"foldr"
0 0 23 3 1 #" "
0 0 14 3 7 #"seg+img"
0 0 23 3 1 #" "
0 0 14 3 3 #"img"
0 0 23 3 1 #" "
0 0 14 3 4 #"segs"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"segs+img"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 21 3 2 #"10"
0 0 23 3 1 #" "
0 0 21 3 2 #"10"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 21 3 2 #"10"
0 0 23 3 1 #" "
0 0 21 3 2 #"20"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 21 3 2 #"10"
0 0 23 3 1 #" "
0 0 21 3 2 #"30"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 21 3 2 #"20"
0 0 23 3 1 #" "
0 0 21 3 2 #"30"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 21 3 2 #"30"
0 0 23 3 1 #" "
0 0 21 3 2 #"30"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 21 3 2 #"30"
0 0 23 3 1 #" "
0 0 21 3 2 #"40"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 11 #"empty-scene"
0 0 23 3 1 #" "
0 0 21 3 3 #"100"
0 0 23 3 1 #" "
0 0 21 3 3 #"100"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 37 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 23 29 1 #"\n"
0 0 17 3 37 #";;;;;;;;;;;;;;;;; MAP ;;;;;;;;;;;;;;;"
0 0 23 29 1 #"\n"
0 0 17 3 37 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 52 #";; apply-to-all : [X -> Y] [List of X] -> [Listof Y]"
0 0 23 29 1 #"\n"
0 0 17 3 61
#";; Applys the given operation to all values in the given list"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 12 #"apply-to-all"
0 0 23 3 1 #" "
0 0 14 3 2 #"op"
0 0 23 3 1 #" "
0 0 14 3 4 #"list"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 4 #"list"
0 0 23 3 2 #") "
0 0 14 3 5 #"empty"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 2 #"op"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"list"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 12 #"apply-to-all"
0 0 23 3 1 #" "
0 0 14 3 2 #"op"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 4 #"list"
0 0 23 3 6 #")))]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 51 #";; add1-to-all : [Listof Number] -> [Listof Number]"
0 0 23 29 1 #"\n"
0 0 17 3 42 #";; Add 1 to every number in the input list"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"add1-to-all"
0 0 23 3 1 #" "
0 0 14 3 3 #"lon"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 12 #"apply-to-all"
0 0 23 3 1 #" "
0 0 14 3 4 #"add1"
0 0 23 3 1 #" "
0 0 14 3 3 #"lon"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 11 #";; Example:"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 11 #"add1-to-all"
0 0 23 3 1 #" "
0 0 21 3 1 #"'"
0 0 23 3 1 #"("
0 0 21 3 1 #"1"
0 0 23 3 1 #" "
0 0 21 3 1 #"2"
0 0 23 3 1 #" "
0 0 21 3 1 #"3"
0 0 23 3 1 #" "
0 0 21 3 1 #"4"
0 0 23 3 1 #" "
0 0 21 3 1 #"5"
0 0 23 3 1 #" "
0 0 21 3 1 #"6"
0 0 23 3 1 #" "
0 0 21 3 1 #"7"
0 0 23 3 1 #" "
0 0 21 3 1 #"8"
0 0 23 3 1 #" "
0 0 21 3 1 #"9"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 55 #";; Apply-to-all is part of the standard library : \"map\""
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 3 #"map"
0 0 23 3 1 #" "
0 0 14 3 4 #"add1"
0 0 23 3 1 #" "
0 0 21 3 1 #"'"
0 0 23 3 1 #"("
0 0 21 3 1 #"1"
0 0 23 3 1 #" "
0 0 21 3 1 #"2"
0 0 23 3 1 #" "
0 0 21 3 1 #"3"
0 0 23 3 1 #" "
0 0 21 3 1 #"4"
0 0 23 3 1 #" "
0 0 21 3 1 #"5"
0 0 23 3 1 #" "
0 0 21 3 1 #"6"
0 0 23 3 1 #" "
0 0 21 3 1 #"7"
0 0 23 3 1 #" "
0 0 21 3 1 #"8"
0 0 23 3 1 #" "
0 0 21 3 1 #"9"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 3 #"map"
0 0 23 3 1 #" "
0 0 14 3 14 #"number->string"
0 0 23 3 1 #" "
0 0 21 3 1 #"'"
0 0 23 3 1 #"("
0 0 21 3 1 #"1"
0 0 23 3 1 #" "
0 0 21 3 1 #"2"
0 0 23 3 1 #" "
0 0 21 3 1 #"3"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 47 #";; shift-posns : [Listof Posn] -> [Listof Posn]"
0 0 23 29 1 #"\n"
0 0 17 3 49 #";; Add 5 to every coord of the posns in the list."
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"shift-posns"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 23 3 3 #" (("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 7 #"shiftx5"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 2 #"  "
0 0 21 3 1 #"5"
0 0 23 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 42 #"                                         ("
0 0 14 3 6 #"posn-y"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 3 #"map"
0 0 23 3 1 #" "
0 0 14 3 7 #"shiftx5"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 17 3 12 #";; Examples:"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 11 #"shift-posns"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 21 3 1 #"0"
0 0 23 3 1 #" "
0 0 21 3 2 #"10"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 21 3 2 #"10"
0 0 23 3 1 #" "
0 0 21 3 1 #"0"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 18 #";; map using foldr"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 6 #"my-map"
0 0 23 3 1 #" "
0 0 14 3 2 #"op"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 5 #"foldr"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 2 #"op"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 2 #") "
0 0 14 3 1 #"y"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 14 3 1 #"l"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 17 3 12 #";; Examples:"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 6 #"my-map"
0 0 23 3 1 #" "
0 0 14 3 4 #"add1"
0 0 23 3 1 #" "
0 0 21 3 1 #"'"
0 0 23 3 1 #"("
0 0 21 3 1 #"1"
0 0 23 3 1 #" "
0 0 21 3 1 #"2"
0 0 23 3 1 #" "
0 0 21 3 1 #"3"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 58
#";; addx-to-all : Number [Listof Number] -> [Listof Number]"
0 0 23 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"addx-to-all"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 3 #"lon"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 12 #"apply-to-all"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 14 3 3 #"lon"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 1 #"f"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 3 #") ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 21 3 1 #"3"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 37 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 23 29 1 #"\n"
0 0 17 3 37 #";;;;;;;;;;;;;;;; ORMAP ;;;;;;;;;;;;;;"
0 0 23 29 1 #"\n"
0 0 17 3 37 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 50 #";; my-ormap : [X -> Boolean] [Listof X] -> Boolean"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 8 #"my-ormap"
0 0 23 3 1 #" "
0 0 14 3 4 #"test"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 2 #"or"
0 0 23 3 2 #" ("
0 0 14 3 4 #"test"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 8 #"my-ormap"
0 0 23 3 1 #" "
0 0 14 3 4 #"test"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 6 #")))]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 38 #";; evens? : [Listof Number] -> Boolean"
0 0 23 29 1 #"\n"
0 0 17 3 42 #";; Are there any even numbers in the list?"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 6 #"evens?"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 8 #"my-ormap"
0 0 23 3 1 #" "
0 0 14 3 5 #"even?"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 37 #";; odds? : [Listof Number] -> Boolean"
0 0 23 29 1 #"\n"
0 0 17 3 42 #";; Are there any even numbers in the list?"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 5 #"odds?"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 8 #"my-ormap"
0 0 23 3 1 #" "
0 0 14 3 4 #"odd?"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 37 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 23 29 1 #"\n"
0 0 17 3 37 #";;;;;;;;;;;;;;; ANDMAP ;;;;;;;;;;;;;;"
0 0 23 29 1 #"\n"
0 0 17 3 37 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 25 #";; MODIFIED FROM MY-ORMAP"
0 0 23 29 1 #"\n"
0 0 17 3 51 #";; my-andmap : [X -> Boolean] [Listof X] -> Boolean"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"my-andmap"
0 0 23 3 1 #" "
0 0 14 3 4 #"test"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 2 #") "
0 0 14 3 4 #"true"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 4 #"test"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 14 3 9 #"my-andmap"
0 0 23 3 1 #" "
0 0 14 3 4 #"test"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 6 #")))]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 37 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 23 29 1 #"\n"
0 0 17 3 37 #";;;;;;;;;;;;;;; FILTER ;;;;;;;;;;;;;;"
0 0 23 29 1 #"\n"
0 0 17 3 37 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 45 #";; evens : [Listof Number] -> [Listof Number]"
0 0 23 29 1 #"\n"
0 0 17 3 64
#";; Returns a list with all the even numbers from the given list."
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 5 #"evens"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 2 #") "
0 0 14 3 5 #"empty"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 15 3 5 #"local"
0 0 23 3 3 #" (("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 10 #"evens-rest"
0 0 23 3 2 #" ("
0 0 14 3 5 #"evens"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 5 #"even?"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 2 #") "
0 0 14 3 10 #"evens-rest"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                      ["
0 0 14 3 4 #"else"
0 0 23 3 1 #" "
0 0 14 3 10 #"evens-rest"
0 0 23 3 6 #"]))]))"
0 0 23 29 1 #"\n"
0 0 17 3 11 #";; Example:"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 5 #"evens"
0 0 23 3 1 #" "
0 0 21 3 1 #"'"
0 0 23 3 1 #"("
0 0 21 3 1 #"1"
0 0 23 3 1 #" "
0 0 21 3 1 #"2"
0 0 23 3 1 #" "
0 0 21 3 1 #"3"
0 0 23 3 1 #" "
0 0 21 3 1 #"4"
0 0 23 3 1 #" "
0 0 21 3 1 #"5"
0 0 23 3 1 #" "
0 0 21 3 1 #"6"
0 0 23 3 1 #" "
0 0 21 3 1 #"7"
0 0 23 3 1 #" "
0 0 21 3 1 #"8"
0 0 23 3 1 #" "
0 0 21 3 1 #"9"
0 0 23 3 1 #" "
0 0 21 3 2 #"10"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 54 #";; my-filter : [X -> Boolean] [Listof X] -> [Listof X]"
0 0 23 29 1 #"\n"
0 0 17 3 64
#";; Returns a list with all the even numbers from the given list."
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"my-filter"
0 0 23 3 1 #" "
0 0 14 3 4 #"test"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 2 #") "
0 0 14 3 5 #"empty"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 15 3 5 #"local"
0 0 23 3 3 #" (("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 10 #"evens-rest"
0 0 23 3 2 #" ("
0 0 14 3 5 #"evens"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 4 #"test"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 2 #") "
0 0 14 3 10 #"evens-rest"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                      ["
0 0 14 3 4 #"else"
0 0 23 3 1 #" "
0 0 14 3 10 #"evens-rest"
0 0 23 3 6 #"]))]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 52 #";; filter-evens : [Listof Number] -> [Listof Number]"
0 0 23 29 1 #"\n"
0 0 17 3 64
#";; Returns a list with all the even numbers from the given list."
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 12 #"filter-evens"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 9 #"my-filter"
0 0 23 3 1 #" "
0 0 14 3 5 #"even?"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 17 3 12 #";; Examples:"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"filter-evens"
0 0 23 3 1 #" "
0 0 21 3 1 #"'"
0 0 23 3 1 #"("
0 0 21 3 1 #"1"
0 0 23 3 1 #" "
0 0 21 3 1 #"2"
0 0 23 3 1 #" "
0 0 21 3 1 #"3"
0 0 23 3 1 #" "
0 0 21 3 1 #"4"
0 0 23 3 1 #" "
0 0 21 3 1 #"5"
0 0 23 3 1 #" "
0 0 21 3 1 #"6"
0 0 23 3 1 #" "
0 0 21 3 1 #"7"
0 0 23 3 1 #" "
0 0 21 3 1 #"8"
0 0 23 3 1 #" "
0 0 21 3 1 #"9"
0 0 23 3 1 #" "
0 0 21 3 2 #"10"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 37 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 23 29 1 #"\n"
0 0 17 3 37 #";;;;;;;;;;;;; BUILD-LIST ;;;;;;;;;;;;"
0 0 23 29 1 #"\n"
0 0 17 3 37 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 10 #"build-list"
0 0 23 3 1 #" "
0 0 21 3 2 #"10"
0 0 23 3 1 #" "
0 0 14 3 4 #"add1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 10 #"build-list"
0 0 23 3 1 #" "
0 0 21 3 1 #"5"
0 0 23 3 1 #" "
0 0 14 3 3 #"sqr"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 10 #"build-list"
0 0 23 3 1 #" "
0 0 21 3 1 #"5"
0 0 23 3 1 #" "
0 0 14 3 14 #"number->string"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 10 #"build-list"
0 0 23 3 1 #" "
0 0 21 3 1 #"5"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"Dear\""
0 0 23 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0           0
