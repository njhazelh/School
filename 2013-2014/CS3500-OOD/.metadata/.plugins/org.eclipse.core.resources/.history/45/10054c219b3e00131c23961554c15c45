/*
 * Name: Nicholas Jones Email: njhazelh@zimbra.ccs.neu.edu Comments: n/a
 */

import java.util.ArrayList;
import java.util.Comparator;

/**
 * BTree is an implementation of BinaryTrees of Strings using Red/Black trees,
 * which balance the tree to maintain good worst case efficiency.
 * 
 * @author Nick Jones
 * @version 10/26/2013
 * 
 */
public class BTree {
    private Comparator<String> comp;
    private IBTree             tree;
    
    private BTree(Comparator<String> comp) {
        this.comp = comp;
        this.tree = new Leaf();
    }
    
    public BTree binTree(Comparator<String> comp) {
        return new RBTree(comp);
    }
    
    
    /**
     * Color is either red or black.
     * @author Nick Jones
     * @version 10/26/2013
     */
    private enum Color {
        RED, BLACK;
    }
    
    
    /**
     * IBTree is an interface for an immutable Binary Tree of Strings that order
     * Strings according to Comparator given.
     * 
     * @author Nick Jones
     * @version 1.0 - 10/16/2013
     */
    private interface IBTree {
        /**
         * Try to add a String to the BTree.
         * 
         * @param s String to add
         */
        public void add(String s);
        
        /**
         * Does this IBTree contain s?
         * 
         * @param s The String to look for?
         * @return true if present.
         */
        public boolean contains(String s);
        
        /**
         * Is that a IBTree with the same Strings and Comparator as that?
         * 
         * @param that The Object to compare this to.
         * @return true if equal.
         */
        @Override
        public boolean equals(Object that);
        
        /**
         * Get an int such that the hashCode/equals relationship holds true.
         * 
         * @return an int such that if two objects are equal, they have the same
         *         hashCode.
         */
        @Override
        public int hashCode();
        
        /**
         * Is this IBTree a Leaf?
         */
        public boolean isLeaf();
        
        /**
         * How many Strings are in this IBTree
         * 
         * @return # of Strings in IBTree
         */
        public int size();
        
        /**
         * Make an array of all this Strings of this IBTree in order
         * 
         * @return an ordered ArrayList<String>
         */
        public ArrayList<String> toArrayList();
        
        /**
         * Get a string representing this IBTree
         * 
         * @return s1, s2, s3, ...
         */
        @Override
        public String toString();
    }
    
    
    private class Leaf implements IBTree {
        
    }
}
